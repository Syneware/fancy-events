/*!
 * Fancy Events
 * https://github.com/Syneware/fancy-events
 *
 * Copyright (c) 2022 Syneware
 * Licensed under the MIT license. https://raw.githubusercontent.com/Syneware/fancy-events/master/LICENSE
 */
var EventEmitter=function(){"use strict";return class{constructor({mode:e="wildcard",includeStack:t=!1,delimiter:s="."}={}){this._listeners=new Map,this._wildcardsRegex=new Map,this._listenerRegex=new Map,this.mode="wildcard",this.includeStack=!1,this.delimiter=".",this.addListener=(e,t,s={})=>(Array.isArray(e)?e.forEach((e=>this._addListener(e,t,s))):this._addListener(e,t,s),this),this._addListener=(e,t,s={})=>{if(this._listeners.has(e)||this._listeners.set(e,[]),this.emit("newListener",e,t),"wildcard"===this.mode&&!this._wildcardsRegex.has(e)){const t=e.split(this.delimiter).map((e=>"*"===e?"\\w*":e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))),s=new RegExp(`^${t.join("\\"+this.delimiter)}$`);this._wildcardsRegex.set(e,s)}"regex"!==this.mode||this._listenerRegex.has(e)||this._listenerRegex.set(e,new RegExp(e)),this._getListeners(e).push({callback:t,once:!!s?.once})},this.on=this.addListener,this.once=(e,t,s={})=>this.addListener(e,t,{...s,once:!0}),this._removeListener=(e,t)=>{if(this.listenerCount(e)){let s=this._getListeners(e).findIndex((e=>e?.callback===t));if(s>-1)return this._getListeners(e).splice(s,1),!0}return!1},this.removeListener=(e,t)=>(this._removeListener(e,t)&&this.emit("removeListener",e,t),this),this.off=this.removeListener,this.removeAllListeners=e=>{if(e&&this.listeners(e).length){const t=this.listeners(e);this._listeners.delete(e);for(const s of t)this.emit("removeListener",e,s)}return this},this.eventNames=()=>this._listeners.keys(),this.listenerCount=e=>this._getListeners(e)?.length||0,this.listeners=e=>this._getListeners(e)?.map?.((e=>e.callback))||[],this._getListeners=e=>this._listeners.get(e)||[],this._getStack=()=>{const e=Error.prepareStackTrace,t=new Error;Error.prepareStackTrace=(e,t)=>t;const s=t.stack;return Error.prepareStackTrace=e,s?.slice(2)||[]},this._callListeners=(e,t,s)=>{for(const i of this._getListeners(e))i.once&&this._removeListener(e,i?.callback),i?.callback?.(t,...s)},this._callAsyncListeners=(e,t,s)=>{const i=[];for(const r of this._getListeners(e))r.once&&this._removeListener(e,r?.callback),i.push(r?.callback?.(t,...s));return i},this.emit=(e,...t)=>{const s={event:e};this.includeStack&&(s.stack=this._getStack().map((e=>({typeName:e.getTypeName(),methodName:e.getMethodName(),function:e.getFunction(),functionName:e.getFunctionName(),fileName:e.getFileName(),lineNumber:e.getLineNumber()}))));let i=!1;if("wildcard"===this.mode)for(const r of this._listeners.keys())this._wildcardsRegex.get(r)?.test?.(e)&&(this._callListeners(r,s,t),i=!0);else if("regex"===this.mode)for(const r of this._listeners.keys())this._listenerRegex.get(r)?.test?.(e)&&(this._callListeners(r,s,t),i=!0);else this._listeners.has(e)&&(this._callListeners(e,s,t),i=!0);return i},this.emitAsync=async(e,...t)=>{const s={event:e};this.includeStack&&(s.stack=this._getStack().map((e=>({typeName:e.getTypeName(),methodName:e.getMethodName(),function:e.getFunction(),functionName:e.getFunctionName(),fileName:e.getFileName(),lineNumber:e.getLineNumber()}))));let i=[];if("wildcard"===this.mode)for(const r of this._listeners.keys())this._wildcardsRegex.get(r)?.test?.(e)&&i.push(...this._callAsyncListeners(r,s,t));else if("regex"===this.mode)for(const r of this._listeners.keys())this._listenerRegex.get(r)?.test?.(e)&&i.push(...this._callAsyncListeners(r,s,t));else this._listeners.has(e)&&(i=this._callAsyncListeners(e,s,t));return!!i?.length&&(await Promise.allSettled(i),!0)},e&&(this.mode=e),void 0!==t&&(this.includeStack=t),s&&(this.delimiter=s)}}}();
