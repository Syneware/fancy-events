/*!
 * Fancy Events
 * https://github.com/Syneware/fancy-events
 *
 * Copyright (c) 2022 Syneware
 * Licensed under the MIT license. https://raw.githubusercontent.com/Syneware/fancy-events/master/LICENSE
 */
var EventEmitter=function(){"use strict";function e(e,t,i){return Object.defineProperty(e,t,{value:i,configurable:!0,writable:!0,enumerable:!0})}function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}return class{constructor({mode:i="wildcard",includeStack:s=!1,delimiter:r="."}={}){this._listeners={},this._wildcardsRegex={},this._listenerRegex={},this.mode="wildcard",this.includeStack=!1,this.delimiter=".",this.addListener=(e,t,i={})=>(Array.isArray(e)?e.forEach((e=>this._addListener(e,t,i))):this._addListener(e,t,i),this),this._addListener=(i,s,r={})=>{if(t(this._listeners,i)||e(this._listeners,i,[]),this.emit("newListener",i,s),!t(this._wildcardsRegex,i)){const t=i.split(this.delimiter).map((e=>"*"===e?"\\w*":e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))),s=new RegExp(`^${t.join("\\"+this.delimiter)}$`);e(this._wildcardsRegex,i,s)}t(this._listenerRegex,i)||e(this._listenerRegex,i,new RegExp(i)),this._listeners[i].push({callback:s,once:!!r?.once})},this.on=this.addListener,this.once=(e,t,i={})=>this.addListener(e,t,{...i,once:!0}),this._removeListener=(e,t)=>{if(this.listenerCount(e)){let i=this._listeners[e].findIndex((e=>e?.callback===t));if(i>-1)return this._listeners[e].splice(i,1),!0}return!1},this.removeListener=(e,t)=>(this._removeListener(e,t)&&this.emit("removeListener",e,t),this),this.off=this.removeListener,this.removeAllListeners=e=>{if(e&&this.listeners(e).length){const t=this.listeners(e);delete this._listeners[e];for(const i of t)this.emit("removeListener",e,i)}return this},this.eventNames=()=>Object.keys(this._listeners),this.listenerCount=e=>e&&t(this._listeners,e)?this._listeners[e].length:0,this.listeners=e=>e&&t(this._listeners,e)?this._listeners[e].map((e=>e.callback)):[],this._getStack=()=>{const e=Error.prepareStackTrace,t=new Error;Error.prepareStackTrace=(e,t)=>t;const i=t.stack;return Error.prepareStackTrace=e,i?.slice(2)||[]},this._callListeners=(e,i,s)=>{if(e&&t(this._listeners,e))for(const t of this._listeners[e])t.once&&this._removeListener(e,t?.callback),t?.callback?.(i,...s)},this.emit=(e,...i)=>{const s={event:e};this.includeStack&&(s.stack=this._getStack().map((e=>({typeName:e.getTypeName(),methodName:e.getMethodName(),function:e.getFunction(),functionName:e.getFunctionName(),fileName:e.getFileName(),lineNumber:e.getLineNumber()}))));let r=!1;if("wildcard"===this.mode)for(const t in this._listeners)this._wildcardsRegex[t]?.test?.(e)&&(this._callListeners(t,s,i),r=!0);else if("regex"===this.mode)for(const t in this._listeners)this._listenerRegex[t]?.test?.(e)&&(this._callListeners(t,s,i),r=!0);else t(this._listeners,e)&&(this._callListeners(e,s,i),r=!0);return r},i&&(this.mode=i),void 0!==s&&(this.includeStack=s),r&&(this.delimiter=r)}}}();
